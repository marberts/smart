
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "smart"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('smart')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("complete_periods")
> ### * complete_periods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: complete periods
> ### Title: Complete periods
> ### Aliases: complete_quarters complete_years
> 
> ### ** Examples
> 
> x <- seq(as.Date("2018-01-01"), as.Date("2019-11-01"), "month")
> 
> complete_quarters(x)
 [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE
> 
> complete_years(x)
 [1]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> 
> 
> 
> cleanEx()
> nameEx("generalized_ave")
> ### * generalized_ave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generalized ave
> ### Title: Generalized ave
> ### Aliases: generalized_ave
> 
> ### ** Examples
> 
> generalized_ave(mean)(1:10, rep(1:2, 5)) # same as stats::ave(1:10, rep(1:2, 5))
 [1] 5 6 5 6 5 6 5 6 5 6
> 
> generalized_ave(sum)(1:10, rep(1:2, 5)) # same as stats::ave(1:10, rep(1:2, 5), FUN = sum)
 [1] 25 30 25 30 25 30 25 30 25 30
> 
> generalized_ave(function(x) x == max(x))(1:10, rep(1:2, 5)) # returns a logical
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE
> 
> # use interaction to group by multiple factors
> f <- rep(1:2, 5)
> g <- rep(1:5, 2)
> generalized_ave(mean)(1:10, interaction(f, g)) # same as stats::ave(1:10, f, g)
 [1]  1  2  3  4  5  6  7  8  9 10
> 
> 
> 
> cleanEx()
> nameEx("helpers")
> ### * helpers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: little helpers
> ### Title: Little helpers
> ### Aliases: distinct allNA integer_digits
> 
> ### ** Examples
> 
> distinct(1:3)
[1] 3
> 
> distinct(c(1:3, NA, NA)) # NAs are lumped together
[1] 4
> 
> distinct(c(1:3, NA, NA), incomparables = NA_real_)
[1] 5
> 
> integer_digits(-1.5) # same as nchar(abs(trunc(-1.5)))
[1] 1
> 
> integer_digits(Inf) # nchar(abs(trunc(Inf))) returns 3
[1] Inf
> 
> 
> 
> cleanEx()
> nameEx("set_operations")
> ### * set_operations
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: set operators
> ### Title: Set operators
> ### Aliases: %c% %n% %u% %-% %(-)% %==%
> 
> ### ** Examples
> 
> A <- 2:4
> B <- 1:3
> C <- 3:5
> 
> A %n% B %n% C
[1] 3
> 
> A %u% B %u% C
[1] 2 3 4 1 5
> 
> (A %n% B %n% C) %c% (A %u% B %u% C)
[1] TRUE
> 
> (A %-% (B %u% C)) %==% ((A %-% B) %n% (A %-% C))
[1] TRUE
> 
> A %(-)% NULL %==% A
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("weighted_mode")
> ### * weighted_mode
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: weighted mode
> ### Title: Weighted mode
> ### Aliases: weighted_mode
> 
> ### ** Examples
> 
> # Unique mode
> weighted_mode(c(1, 3, 2, 1))
[1] 1
> weighted_mode(c(TRUE, FALSE, TRUE, FALSE), 1:4)
[1] FALSE
> 
> # Two modes
> weighted_mode(c("a", "b", "c", "b", "c"))
Warning in weighted_mode(c("a", "b", "c", "b", "c")) :
  mode is not unique
[1] "b" "c"
> 
> # Notice that the mode is known despite the NA
> weighted_mode(c(1, 1, 1, 2, NA))
[1] 1
> 
> # But this isn't always the case
> weighted_mode(c(1, 1, 2, NA))
[1] NA
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.26 0.01 0.28 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
